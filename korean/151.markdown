원문 : [http://javascriptweekly.com/archive/151.html]

- - -
# 특집 기사

## [Brendan Eich의 자바스크립트 책임](http://www.youtube.com/watch?v=IXIkTrq3Rgg)
자바스크립트의 창시자가 자바스크립트의 현재 상황과 다음에는 무엇이 추가될 것인지, 그리고 어떤 것들이 필요한 지에 대해 JSConf EU에서 이야기했습니다. 30분에 걸쳐 자바스크립트 언어와 문법에 대한 많은 기술적인 요소들을 즐길 수 있습니다.
> Brendan Eich : 자바스크립트의 창시자이며 현재 Mozilla Corporation의 CTO입니다.

## [Yeoman과 Polymer를 활용하여 Web 애플리케이션 제작하기](http://www.html5rocks.com/en/tutorials/webcomponents/yeoman/)
Addy Osmani는 Yeoman(웹 애플리케이션 제작을 간소화하기 위한 워크플로우 도구)과 Polymer(웹 컴포넌트을 이용하여 애플리케이션들을 개발하기 위한 폴리필 라이브러리)에 대해 간단히 설명합니다.

## [Ecma에서 JSON을 위한 ECMA-404표준 1판 출시](http://www.ecma-international.org/publications/standards/Ecma-404.htm)

## [JingJS: 중국의 자바스크립트 컨퍼런스(베이징, 11월 9일 ~ 11월 11일) ](http://jingjs.org)


- - -
# 읽을 거리

## [Array.prototype.reduce를 사용해 검색하기](http://ariya.ofilabs.com/2013/10/searching-using-array-prototype-reduce.html)
'reduce' 메서드를 사용하여 배열안의 특정 아이템들을 검색하는 흥미로운 방법.

## [Node.js란 무엇인가?](http://stackoverflow.com/q/1884724/3951#6782438)
Node.js가 무엇이고, 왜 모두들 사용하는 지에 대해 확실히 알지 못하는 개발자들을 위한 폭넓고 통찰력있는 해답.

## [자바스크립트의 Try/Catch 다시 생각해보기](http://flippinawesome.org/2013/09/30/rethinking-javascripts-trycatch/)
Ryan Morr는 더 좋은 성능을 제공하고 커스터마이즈 가능한 자바스크립트 try/catch의 대안을 공유합니다.

## [자바스크립트 기초](http://flippinawesome.org/2013/10/07/javascript-fundamentals/?)
Azat Mardanov는 어떤 점이 자바스크립트를 독특하게 표현력이 높은 언어로 만드는지, 그리고 가끔씩 좌절스럽게 만드는지에 대해 조사합니다.

## [힙 스냅샷과 Node.js 메모리 누수 처리하기](http://strongloop.com/strongblog/how-to-heap-snapshots/)
Node의 핵심 공헌자이자 StrongLoop 팀의 멤버인 Ben Noordhuis는 V8 힙 스냅샷을 찍기위한 간단한 메커니즘을 개발자들에게 제공하기 위해 heapdump 모듈을 만들었습니다.

## [js-git을 개발하고 있는 Tim Caswell](http://blog.pluralsight.com/2013/10/04/tim-caswell-on-the-development-of-js-git/)
js-git은 Git 소스 코드 제어 시스템의 자바스크립트 구현체입니다. Pluralsight의 Geoffrey Grosenbach는 그 제작자와 작업이 어떻게 진행되고 있는지에 대해 이야기를 나누었습니다.

## [자바스크립트로 Brackets 코드에디터 확장하기](http://flippinawesome.org/2013/10/07/extending-the-brackets-code-editor-with-javascript/?)
Alessandro Artoni는 자바스크립트만 사용해서 Brackets 코드 에디터의 확장을 만드는 방법을 설명합니다.

## [자바스크립트로 'Maybe'를 만들기위해 ES6 제네레이터 가지고 놀기](http://truffles.me.uk/playing-with-es6-generators-to-make-a-maybe-in-javascript)

> [Maybe](http://learnyouahaskell.com/a-fistful-of-monads#getting-our-feet-wet-with-maybe)

## [SpiderMonkey의 ES6 제네레이터와 이터레이션](http://wingolog.org/archives/2013/10/07/es6-generators-and-iteration-in-spidermonkey)
파이어폭스의 자바스크립트 엔진인 스파이더몽키(SpiderMonkey)는 이제 ES6 제네레이터와 이터레이션을 지원합니다. 이 글은 그들이 어떻게 동작하는지 살펴봅니다.

## [왜 Asm.js는 게임 개발자에게 대단한 것인가](http://ubercode.de/blog/why-asm-js-is-a-big-deal-for-game-developers)

## [자바스크립트 콘솔 API](http://www.2ality.com/2013/10/console-api.html)
대부분의 자바스크립트엔진에는, 로그와 디버깅을 위한 메서드를 가지는 전역 객체 console이 있습니다. 이 객체는 언어의 일부는 아니지만, 사실상의 표준이 되었습니다.


- - -
# 동영상

## [Angular, Ember 그리고 Knockout에서의 양방향 바인딩(The Two-way Binding)에 대한 비교](http://www.youtube.com/watch?v=mVjpwia1YN4)
JSconf EU에서 그들의 비슷한 점과 다른 점을 통해 라이브러리들의 장점과 단점에 대해 이야기합니다.(19:16)

## [자바스크립트에서 단계별로 간단한 게임 만들기](https://vimeo.com/74008847)
(28:59)

## [나비의 처지: Object.observe()](http://www.youtube.com/watch?v=mfOh-J-9BY0)
Object.observe는 자바스크립트 객체가 변화되었을 때 모니터링을 위해 제안된 메커니즘입니다. Addy Osmani가 43분의 이야기를 통해 그것이 어떻게 동작하는지 설명합니다.
> 나비의 처지(Plight Of The Butterfly): 몇몇 사람들은 나비가 몸에 앉을 때 행운이라고 생각합니다. 하지만 영국에서는 전통적으로 그 해 첫번째로 본 나비는 죽여야지만, 불행을 피할 수 있다고 생각합니다. 이 세션에서는 Object.observe()에 대해 알고 있다고 생각했지만 아니었던 부분에 대해 설명합니다.
> Object.observe()를 나비에 비유해서 좋을 수도 있지만 누군가는 없애버려야한다고 생각할 수도 있다고 이야기한 것 같습니다.

## [어떻게 친구를 얻고, 표준단체에 영향을 끼칠 것인가](https://www.youtube.com/watch?v=hneN6aW-d9w&amp;hd=1)
LXJS 2013에서 있었던 25분간의 영상으로 Domenic Denicola이 웹 플랫폼의 다양한 기술안에서 활동하고 있는 표준단체들에 대해서 이야기합니다. (25:32)
>[LXJS 2013](http://2013.lxjs.org): 포르투갈 리스본에서 2013년 10월 2-3일에 열린 자바스크립트 비영리 커뮤니티 주최의 국제 컨퍼런스입니다.

## [Promise들로 중첩된 콜백들 지우기](http://www.icenium.com/blog/icenium-team-blog/2013/10/07/cleaning-up-nested-callbacks-with-promises)
12분간의 스크린캐스트입니다. (12:33)

## [클로져스크립트(ClosureScript): David Nolan의 Lisp의 복수](https://vimeo.com/76226013)
Web Rebels 컨퍼런스에 있었던 40분간의 이야기입니다.(41:35)

## [MEAN 가져오기(Mongo, Express, Angular, Node)](http://www.youtube.com/watch?v=XwSFg8nqBFA#t=99)
MEAN은 MongoDB, Express, Node.JS와 그리고 AngularJS를 이용한 애플리케이션의 전체 개발 스택입니다. 그리고, 구글의 Brad Green이 그것들에 대해 개발자의 선택에 대해 이야기했습니다.(57:17)

- - -
# 중요 릴리즈

## [Backbone.js 1.1 릴리즈](http://backbonejs.org/)
세부변경과 최적화, 버그수정이 대부분입니다.

## [SproutCore 1.10.0 릴리즈](http://blog.sproutcore.com/sproutcore-1-10-0-release/)

## [YUI 3.13.0 릴리즈](http://www.yuiblog.com/blog/2013/10/07/yui-3-13-0-released/)
특히 리치 텍스트 편집기에 많은 수정과 세부변경이 있었습니다.

## [Knockout 3.0 릴리즈 후보 사용가능](http://blog.stevensanderson.com/2013/10/08/knockout-3-0-release-candidate-available/)
주요 구조적인 라이브러리들을 위한 한 주인 것 같습니다.


- - -
# 코드, 라이브러리들과 도구들

## [Prerender: 검색 엔진에 잘 검색 되도록 AngularJS, Backbone 그리고 Ember 앱 만들기](http://prerender.io/)
검색 엔진 크롤러를 감지하면 이에 적합한 정보를 제공하고 싱글 페이지 자바스크립트 앱도 잘 크롤링 되도록 동작하는 노드(또는 레일즈) 미들웨어

## [Dropzone.js: 이미지 프리뷰를 제공하는 드래그 앤 드롭 파일 업로드](http://www.dropzonejs.com/)

## [amdclean: AMD 코드를 표준 자바스크립트로 변환해주는 빌드 툴](https://github.com/gfranko/amdclean)

## [QuestionMark.js: 단축키를 보여주는 모달(Modal) 윈도우](http://www.impressivewebs.com/demo-files/question-mark-js/)

## [BubbleChart: 버블 차트로 이차원 데이터를 시각적으로 비교해주는 자바스크립트 모듈](http://jondavidjohn.github.io/bubblechart/)

## [Dolly.js: 테이블에 엑셀같은 복사 기능을 추가해 주는 jQuery UI 위젯](http://lunarlogic.github.io/dolly.js/)

## [Arg.js: 가벼운 URL 인자(argument)와 매개변수(parameter) 파서](https://github.com/stretchr/arg.js)

## [textAngular: 양방향 바인딩을 지원하는 가벼운 Angular.js 텍스트 에디터](http://textangular.com/)


- - -
# 일자리

## [Turn사의 소프트웨어 엔지니어 @ 실리콘 밸리](http://jobsco.re/17D541y)
빅 데이터, 머신 러닝, 분산 시스템. 이런 기술에 흥미가 있으며 자바스크립트에 능숙하다면 턴의 프론트엔드 애플리케이션 팀에 합류하는 일에 대해 이야기하고 싶습니다.

## [Weebly에서 프론트 엔드 자바스크립트 전문가를 찾습니다!](http://www.weebly.com/jobs.php)
YCombinator가 지원하는 Weebly의 작으면서도 재능있는 개발팀에 합류하세요. 수천만명이 사용하게 될 기능을 직접 만드세요.

## [Booking.com의 UX/Web 디자이너 @ 네덜란드 암스테르담](http://www.booking.com/jobs.en-gb.html?sid=eaa0c614fc3d4930d80628a6ee8c72a3;dcid=1;st=details;job_id=10480)
세계 제일의 숙박 웹사이트인 Booking.com에서 제일 스마트한 디자이너를 찾습니다. HTML과 CSS에 능숙한가요? 수백만명의 사람들에게 영향을 주는 중요하고 확인 가능한 개선사항을 자유롭게 만들 수 있을 것입니다. 암스테르담으로의 이주도 지원하고 있습니다.

- - -
# 마지막으로,

## [대용량 객체 힙 밀집화(compaction): 과연 사용해야 할까요?](https://www.simple-talk.com/dotnet/.net-framework/large-object-heap-compact…eapcompaction&amp;utm_campaign=antsmemoryprofiler&amp;utm_term=email-21078)
크리스가 LOH(Large Object Heap) 파편화와 밀집화를 살펴봅니다. 언제 밀집화를 사용해야 할지 그리고 왜 때때로 밀집화하면 안되는지 이유를 알아볼 것입니다. 이 외에도 더 많은 정보를 얻을 수 있을 것입니다.